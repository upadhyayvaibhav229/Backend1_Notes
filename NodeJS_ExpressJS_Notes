# Express and Node.js Notes (Interview Perspective)

## Introduction to Node.js

* **Node.js**: A runtime environment to run JavaScript on the server-side.
* **Key Features**:

  * Asynchronous, Event-Driven.
  * Powered by the V8 engine for fast execution.
  * Single-threaded with a non-blocking I/O model.
  * Cross-platform.

### Frequently Asked Questions:

1. **What is Node.js?**

   * Node.js is a JavaScript runtime built on Chrome's V8 engine, used for building scalable and high-performance server-side applications.
2. **Why is Node.js single-threaded?**

   * It uses a single-threaded event loop for handling asynchronous operations efficiently.

### Key Concepts:

* **Modules**:

  * Built-in Modules: `fs`, `http`, `path`, etc.
  * Third-party Modules: Installed via npm (e.g., `express`, `lodash`).
  * Custom Modules: Code modules created by developers.
* **Event Loop**:

  * Core of Node.js for handling asynchronous operations.
  * Handles callbacks, promises, and async/await.
* **File System Operations**:

  ```javascript
  const fs = require('fs');
  fs.readFile('file.txt', (err, data) => {
    if (err) throw err;
    console.log(data.toString());
  });
  ```
* **Streams and Buffers**:

  * Used for handling large amounts of data efficiently.

---
- [filesystems Guide](fileSystems.md)

## Introduction to Express.js

* **Express.js**: A minimal and flexible Node.js web application framework.

### Why Use Express?

* Simplifies server creation.
* Provides robust routing.
* Supports middleware for request/response handling.
* Integrates with templating engines like Pug and EJS.

### Frequently Asked Questions:

1. **What is Express.js?**

   * Express is a web framework for Node.js that simplifies the creation of web servers and APIs.
2. **How does middleware work in Express?**

   * Middleware functions process requests in a pipeline fashion before the response is sent.

### Key Concepts:

* **Basic Server Setup**:

  ```javascript
  const express = require('express');
  const app = express();

  app.get('/', (req, res) => {
    res.send('Hello, World!');
  });

  app.listen(3000, () => {
    console.log('Server is running on port 3000');
  });
  ```
* **Middleware**:

 Middleware is a function that runs between the request and the response in an Express.js application. It has access to the request (req) and response (res) objects and a next() function that passes control to the next middleware.
  * Example:

    ```javascript
    app.use((req, res, next) => {
      console.log(`Request Method: ${req.method}, URL: ${req.url}`);
      next();
    });
    ```
* **Routing**:

  * Example:

    ```javascript
    app.get('/users', (req, res) => {
      res.json({ name: 'Alice', age: 25 });
    });
    ```
* **Error Handling**:

  ```javascript
  app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
  });
  ```
* **Templating**:

  ```javascript
  app.set('view engine', 'pug');
  app.get('/template', (req, res) => {
    res.render('index', { title: 'Express', message: 'Welcome!' });
  });
  ```

---

## Commonly Used NPM Packages

1. **Body Parser**:

   * Parses incoming request bodies.
   * Example:

     ```javascript
     const bodyParser = require('body-parser');
     app.use(bodyParser.json());
     ```
2. **Mongoose**:

   * MongoDB object modeling tool.
   * Example:

     ```javascript
     const mongoose = require('mongoose');
     mongoose.connect('mongodb://localhost/test', { useNewUrlParser: true });
     ```
3. **Cors**:

   * Middleware to enable CORS (Cross-Origin Resource Sharing).
   * Example:

     ```javascript
     const cors = require('cors');
     app.use(cors());
     ```
4. **Dotenv**:

   * Loads environment variables from `.env` file.
   * Example:

     ```javascript
     require('dotenv').config();
     const port = process.env.PORT || 3000;
     ```

---

## Best Practices (Interview Highlights)

* Use **environment variables** for sensitive data.
* Always validate and sanitize user inputs.
* Implement **proper error handling** and logging mechanisms.
* Keep the application modular by separating routes, controllers, and services.
* Use a reverse proxy (e.g., Nginx) for load balancing.
* Follow RESTful API design principles.
* Optimize performance using caching (e.g., Redis).
* Apply security measures (e.g., rate limiting, helmet.js).

---

## Common Interview Questions

1. **What are the differences between Node.js and Express.js?**

   * Node.js is a runtime; Express.js is a framework built on Node.js.
2. **How do you handle errors in Express?**

   * Using middleware:

     ```javascript
     app.use((err, req, res, next) => {
       res.status(500).send('Error: ' + err.message);
     });
     ```
3. **Explain the event loop in Node.js.**

   * It processes asynchronous operations via the call stack, callback queue, and event loop mechanism.
4. **How can you improve application security in Node.js?**

   * Use packages like `helmet`, implement rate limiting, and validate inputs.
5. **What is the purpose of middleware in Express?**

   * Middleware functions intercept and process requests before reaching the final handler.

---

✅ Query Parameters
Definition: Query parameters are key-value pairs sent in the URL after a ?. They're mostly optional and used for filtering, searching, pagination, etc.

Syntax:

bash
Copy
Edit
/products?category=books&sort=price
Access in Express:


  ```javascript
app.get('/products', (req, res) => {
  const category = req.query.category;
  const sort = req.query.sort;
  res.send(`Category: ${category}, Sort by: ${sort}`);
});
```
```
Output for /products?category=books&sort=price:
```

```
Category: books, Sort by: price
```

✅ Route Parameters
Definition: Route parameters are used to capture dynamic values from the URL path. They are required and often used to get a specific resource by ID.

Syntax:

```
/users/123
```

Access in Express:

```
app.get('/users/:id', (req, res) => {
  const userId = req.params.id;
  res.send(`User ID: ${userId}`);
});
Output for /users/123:

```
```
User ID: 123
```

